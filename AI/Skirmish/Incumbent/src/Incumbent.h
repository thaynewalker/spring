/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#ifndef _incumbent_incumbent_H
#define _incumbent_incumbent_H

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "AIBase.h"

namespace incumbent {

/**
 * This is the main C++ entry point of this AI.
 */
class Incumbent : public AIBase {

private:
	std::map<springai::Unit*,std::vector<springai::Unit*> > inrangeTable;
public:
	Incumbent(springai::OOAICallback* callback);
protected:
	virtual void defaultEvent();
	virtual void enemyLeaveRadarEvent(SEnemyLeaveRadarEvent* evt);
	virtual void enemyEnterRadarEvent(SEnemyEnterRadarEvent* evt);
	virtual void weaponFiredEvent(SWeaponFiredEvent* evt);
	virtual void commandFinishedEvent(SCommandFinishedEvent* evt);
	virtual void enemyLeaveLOSEvent(SEnemyLeaveLOSEvent* evt){}
	virtual void enemyEnterLOSEvent(SEnemyEnterLOSEvent* evt){}
	virtual void enemyDestroyedEvent(SEnemyDestroyedEvent* evt);
	virtual void enemyDamagedEvent(SEnemyDamagedEvent* evt);
	virtual void unitDamagedEvent(SUnitDamagedEvent* evt);
	virtual void unitDestroyedEvent(SUnitDestroyedEvent* evt);
}; // class Incumbent

} // namespace incumbent

#endif // _incumbent_incumbent_H

