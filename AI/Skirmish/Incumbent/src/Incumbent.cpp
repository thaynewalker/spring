/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#include "Incumbent.h"


#include "ExternalAI/Interface/AISEvents.h"
#include "ExternalAI/Interface/AISCommands.h"

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "Unit.h"
#include "UnitDef.h"
#include "Utils.h"
#include "WeaponDef.h"
#include "Game.h"

#include <string>
#include <iostream>
#include <ostream>

incumbent::Incumbent::Incumbent(springai::OOAICallback* callback):
		callback(callback),
		skirmishAIId(callback != NULL ? callback->GetSkirmishAIId() : -1)
		{}

incumbent::Incumbent::~Incumbent() {}

static inline std::string IntToString(int i, const std::string& format = "%i")
{
	char buf[64];
	SNPRINTF(buf, sizeof(buf), format.c_str(), i);
	return std::string(buf);
}

static std::ostream& operator <<(std::ostream& ss, springai::AIFloat3 const& vec){
	ss<<vec.x<<","<<vec.y<<","<<vec.z;
	return ss;
}
static std::ostream& operator <<(std::ostream& ss, springai::Unit *const unit){
	springai::UnitDef* unitDef(unit->GetDef());
	ss<<"Unit "<<unitDef->GetType()<<"-"<<unit->GetUnitId()<<":"<<"\n  "
			<< "NAME: "<<unitDef->GetName()<<"\n  "
			<< "HNAME: "<<unitDef->GetHumanName()<<"\n  "
			<< "CATEGORY: "<<unitDef->GetCategoryString()<<"\n  "
			<< "AIR LOS: "<<unitDef->GetAirLosRadius()<<"\n  "
			<< "JAM RADIUS: "<<unitDef->GetJammerRadius()<<"\n  "
			<< "LOS HEIGHT: "<<unitDef->GetLosHeight()<<"\n  "
			<< "LOS RADIUS: "<<unitDef->GetLosRadius()<<"\n  "
			<< "RADAR ON: "<<unit->IsRadarOn()<<"\n  "
			<< "RADAR RADIUS: "<<unitDef->GetRadarRadius()<<"\n  "
			<< "LOC: "<<unit->GetPos()<<"\n  "
			<< "VEL: "<<unit->GetVel();
	return ss;
}
int incumbent::Incumbent::HandleEvent(int topic, const void* data) {

	switch (topic) {
		case EVENT_UNIT_CREATED: {
			//struct SUnitCreatedEvent* evt = (struct SUnitCreatedEvent*) data;
			//int unitId = evt->unit;

			// TODO: wrap events and commands too

			const std::vector<springai::Unit*> friendlyUnits = callback->GetFriendlyUnits();
			std::string msgText = std::string("HELLO Engine (from Incumbent), Unit# ") + IntToString(friendlyUnits.size());
			if (!friendlyUnits.empty()) {
				springai::Unit* unit = friendlyUnits[0];
				std::cout << unit << "\n";
				springai::UnitDef* unitDef = unit->GetDef();
				std::string unitDefName = unitDef->GetName();
				msgText = msgText + ", first friendly units def name is: " + unitDefName;
			}
			callback->GetGame()->SendTextMessage(msgText.c_str(), 0);

			break;
		}
		case EVENT_COMMAND_FINISHED: {
			break;
		}
		case EVENT_WEAPON_FIRED: {
			struct SWeaponFiredEvent* evt((struct SWeaponFiredEvent*) data);
			springai::WeaponDef* wpn(callback->GetWeaponDefs()[evt->weaponDefId]);
			float intensity(wpn->GetIntensity());
			std::cout << "IR event intensity: " << intensity << "\n";
			break;
		}
		case EVENT_ENEMY_LEAVE_LOS:{
			// Wait for a small amount of time, then turn off
			break;
		}
		case EVENT_ENEMY_ENTER_LOS:{
			// Ground units may fire weapon or something
			break;
		}
		case EVENT_ENEMY_LEAVE_RADAR:{
			// Wait for a small amount of time, then turn off radar (for SA units)
			break;
		}
		case EVENT_ENEMY_ENTER_RADAR:{
			struct SEnemyEnterRadarEvent* evt((struct SEnemyEnterRadarEvent*) data);
			springai::Unit* enemy(nullptr);
			for(auto const e:callback->GetEnemyUnits()){
				if(e->GetUnitId()==evt->enemy){
					std::cout << "Enemy entered radar: "<< e << std::endl;
					enemy=e;
					break;
				}
			}
			if(!enemy){
				//std::cout << "Could not find enemy by ID: "<<evt->enemy << std::endl;
				return 0;
			}

			std::vector<springai::Unit*> const& friendlyUnits(callback->GetFriendlyUnits());

			springai::Unit* closest(nullptr);
			float dist(99999999);

			std::vector<springai::Unit*> radarVisible;

			for(auto const f: friendlyUnits){
				float d(f->GetPos().distance(enemy->GetPos()));
				std::cout << "Enemy distance from " << f << " = " << d << std::endl;
				if(fless(d,f->GetDef()->GetRadarRadius())){
					std::cout << "In radar range of unit " << f->GetUnitId() << "\n";
					radarVisible.push_back(f);
					if(f->IsRadarOn()){
						dist=d;
						closest=f;
					}
				}
			}

			if(closest){
				std::cout << "Enemy was seen by " << closest->GetUnitId() << std::endl;
				if(std::string(closest->GetDef()->GetType()).find("SAM")){
					// SAM - Turn on radar
					std::cout << "EVENT: SAM - Turning on Radar\n";
					closest->RadarOn(3,0,100); // Delay 3 seconds, no options, stay in queue for 100
				}
				if(std::string(closest->GetDef()->GetType()).find("EW")){
					// EW - Simulate a comms event from the unit to other units

					std::cout << "EVENT: EW/ASV - Notifying neighbors - COMMS EVENT\n";
					for(auto const r: radarVisible){
						r->RadarOn(3,0,100);
					}
				}

			}

			break;
		}
		case EVENT_ENEMY_DESTROYED: {
			// Points
			break;
		}
		case EVENT_ENEMY_DAMAGED: {
			// Points
			break;
		}
		case EVENT_UNIT_DAMAGED:{
			// Point loss
			break;
		}
		case EVENT_UNIT_DESTROYED: {
			// Point loss
			break;
		}
		default: {
			break;
		}
	}

	// signal: everything went OK
	return 0;
}
