/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#include "Incumbent.h"
#include "Resource.h"


#include "ExternalAI/Interface/AISEvents.h"
#include "ExternalAI/Interface/AISCommands.h"

// generated by the C++ Wrapper scripts


#include <string>


incumbent::Incumbent::Incumbent(springai::OOAICallback* callback):AIBase(callback){}

void
incumbent::Incumbent::weaponFiredEvent(SWeaponFiredEvent* evt) {
	springai::WeaponDef* wpn(callback->GetWeaponDefs()[evt->weaponDefId]);
	float intensity(wpn->GetIntensity());
	std::cout << "IR event intensity: " << intensity << "\n";
	if(u2i.find(evt->unitId)!=u2i.end()){
		// My unit fired a weapon, lose points
		AIBase::iscore -= 10;
	}
}

void
incumbent::Incumbent::enemyEnterRadarEvent(SEnemyEnterRadarEvent* evt){
	AIBase::iscore+=.001; // Some points for detecting an entity
}

void
incumbent::Incumbent::enemyDamagedEvent(SEnemyDamagedEvent* evt){
	springai::Unit* u(GetEnemyUnitById(evt->enemy));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::iscore+=res->GetOptimum()/2.0;
}

void
incumbent::Incumbent::enemyDestroyedEvent(SEnemyDestroyedEvent* evt){
	springai::Unit* u(GetEnemyUnitById(evt->enemy));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::iscore+=res->GetOptimum()*10.0;
}


void
incumbent::Incumbent::unitDamagedEvent(SUnitDamagedEvent* evt){
	springai::Unit* u(GetFriendlyUnitById(evt->unit));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::iscore-=res->GetOptimum()/2.0;
}

void
incumbent::Incumbent::unitDestroyedEvent(SUnitDestroyedEvent* evt){
	springai::Unit* u(GetFriendlyUnitById(evt->unit));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::iscore-=res->GetOptimum()*10.0;
}

void
incumbent::Incumbent::enemyLeaveRadarEvent(SEnemyLeaveRadarEvent* evt){
	// Wait for a small amount of time, then turn off Radar
}

void
incumbent::Incumbent::defaultEvent(){
	/*if(frame%100==0 && (!AIBase::idone && (done.size() && allDone()))){
		AIBase::idone=true;
		if(AIBase::idone){
			friends=callback->GetFriendlyUnits();
			for(auto & u:friends){
				std::cout << "Destruct " << *u << "\n";
				u->SelfDestruct(0,1);
			}
			std::cout << "RETURN\n";
		}
	}*/
	if(frame++ % 10) return;
	static const std::string SAM("SAM");
	static const std::string EW("EW");

	std::vector<springai::Unit*> const& enemies(callback->GetEnemyUnits());

	friends=callback->GetFriendlyUnits();
	inrangeTable.clear();

	springai::Unit* closest(0);
	double dist(9999999999);

	//std::cout << "=================================\n";
	for(auto const f: friends){
		//std::cout << *f << ":\n";
		for(auto const e: enemies){
			float d(f->GetPos().distance(e->GetPos()));
			//std::cout << "    Enemy " << *e << uint64_t(e) << " dist = " << d;
			if(f->IsRadarOn()&&fless(d,dist)){
				dist = d;
				closest=f;
				//std::cout << " inrange ("<<observationTable[e].size()<<")\n";
			}else if(!f->IsRadarOn()&&f->GetDef()->GetTooltip()==SAM&&fless(d,callback->GetWeaponDefByName("rocket")->GetRange())){
				inrangeTable[e].push_back(f);
			}
		}
	}
	if(inrangeTable.size()){
		for(auto const& e: enemies){ //Radar is currently on...
			// Notify all neighbors who are in range of the entity
			for(auto const& neighbor: inrangeTable[e]){
				neighbor->RadarOn(3,0);
				AIBase::iscore-=0.1; // We lose points for turning on a radar
				neighbor->SetMoveState(utils::MOVESTATE_HOLDPOS,0);
				neighbor->SetFireState(utils::FIRESTATE_FIREATWILL,0);
				if(closest)
					std::cout << "COMMS EVENT from " << *closest << "\n";
			}
		}
	}
}
