/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#include "Incumbent.h"


#include "ExternalAI/Interface/AISEvents.h"
#include "ExternalAI/Interface/AISCommands.h"

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "Unit.h"
#include "UnitDef.h"
#include "Utils.h"
#include "AIUtils.h"
#include "WeaponDef.h"
#include "Game.h"

#include <string>
#include <iostream>


incumbent::Incumbent::Incumbent(springai::OOAICallback* callback):
callback(callback),
skirmishAIId(callback != NULL ? callback->GetSkirmishAIId() : -1),
frame(0)
{
}

incumbent::Incumbent::~Incumbent() {}


int incumbent::Incumbent::HandleEvent(int topic, const void* data) {

	switch (topic) {
	case EVENT_UNIT_CREATED: {
		//struct SUnitCreatedEvent* evt = (struct SUnitCreatedEvent*) data;
		//int unitId = evt->unit;

		// TODO: wrap events and commands too

		const std::vector<springai::Unit*> friendlyUnits = callback->GetFriendlyUnits();
		std::string msgText = std::string("HELLO Engine (from Incumbent), Unit# ") + IntToString(friendlyUnits.size());
		if (!friendlyUnits.empty()) {
			springai::Unit* unit = friendlyUnits[0];
			springai::UnitDef* unitDef = unit->GetDef();
			std::string unitDefName = unitDef->GetName();
			msgText = msgText + ", first friendly units def name is: " + unitDefName;
			if(std::string(unit->GetDef()->GetTooltip()).find("SAM")!=std::string::npos){
				unit->SetMoveState(utils::MOVESTATE_HOLDPOS,0);
				unit->SetFireState(utils::FIRESTATE_RETURNFIRE,0);
				unit->RadarOff(0);
			}
			std::cout << unit << "\n";
		}
		callback->GetGame()->SendTextMessage(msgText.c_str(), 0);

		break;
	}
	case EVENT_COMMAND_FINISHED: {
		break;
	}
	case EVENT_WEAPON_FIRED: {
		struct SWeaponFiredEvent* evt((struct SWeaponFiredEvent*) data);
		springai::WeaponDef* wpn(callback->GetWeaponDefs()[evt->weaponDefId]);
		float intensity(wpn->GetIntensity());
		std::cout << "IR event intensity: " << intensity << "\n";
		break;
	}
	case EVENT_ENEMY_LEAVE_LOS:{
		// Wait for a small amount of time, then turn off
		break;
	}
	case EVENT_ENEMY_ENTER_LOS:{
		// Ground units may fire weapon or something
		break;
	}
	case EVENT_ENEMY_LEAVE_RADAR:{
		// Wait for a small amount of time, then turn off radar (for SA units)
		break;
	}
	case EVENT_ENEMY_ENTER_RADAR:{
		break;
	}
	case EVENT_ENEMY_DESTROYED: {
		// Points
		break;
	}
	case EVENT_ENEMY_DAMAGED: {
		// Points
		break;
	}
	case EVENT_UNIT_DAMAGED:{
		// Point loss
		break;
	}
	case EVENT_UNIT_DESTROYED: {
		// Point loss
		break;
	}
	default: {
		if(frame++ % 10) break; //throttle.
		static const std::string SAM("SAM");
		static const std::string EW("EW");

		std::vector<springai::Unit*> const& enemies(callback->GetEnemyUnits());

		friends=callback->GetFriendlyUnits();
		inrangeTable.clear();

		springai::Unit* closest(0);
		double dist(9999999999);

		//std::cout << "=================================\n";
		for(auto const f: friends){
			//std::cout << *f << ":\n";
			for(auto const e: enemies){
				float d(f->GetPos().distance(e->GetPos()));
				//std::cout << "    Enemy " << *e << uint64_t(e) << " dist = " << d;
				if(f->IsRadarOn()&&fless(d,dist)){
					dist = d;
					closest=f;
					//std::cout << " inrange ("<<observationTable[e].size()<<")\n";
				}else if(!f->IsRadarOn()&&f->GetDef()->GetTooltip()==SAM&&fless(d,callback->GetWeaponDefByName("rocket")->GetRange())){
					inrangeTable[e].push_back(f);
				}
			}
		}
		if(inrangeTable.size()){
				for(auto const& e: enemies){ //Radar is currently on...
					// Notify all neighbors who are in range of the entity
					for(auto const& neighbor: inrangeTable[e]){
						neighbor->RadarOn(3,0);
						neighbor->SetMoveState(utils::MOVESTATE_MANEUVER,0);
						neighbor->SetFireState(utils::FIRESTATE_FIREATWILL,0);
						if(closest)
							std::cout << "COMMS EVENT from " << *closest << "\n";
					}
				}
		}

		break;
	}
	}

	// signal: everything went OK
	return 0;
}
