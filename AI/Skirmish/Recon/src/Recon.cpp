/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#include "Recon.h"


#include "ExternalAI/Interface/AISEvents.h"
#include "ExternalAI/Interface/AISCommands.h"

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "Unit.h"
#include "Team.h"
#include "UnitDef.h"
#include "AIUtils.h"
#include "Game.h"
#include "Resource.h"

#include <string>
#include <iostream>

recon::Recon::Recon(springai::OOAICallback* callback):AIBase(callback){}

void
recon::Recon::weaponFiredEvent(SWeaponFiredEvent* evt) {
	springai::WeaponDef* wpn(callback->GetWeaponDefs()[evt->weaponDefId]);
	float intensity(wpn->GetIntensity());
	std::cout << "IR event intensity: " << intensity << "\n";
	if(u2i.find(evt->unitId)!=u2i.end()){
		// My unit fired a weapon, lose points
		AIBase::rscore -= 10;
	}
}

void
recon::Recon::enemyEnterRadarEvent(SEnemyEnterRadarEvent* evt){
	AIBase::rscore+=.001; // Some points for detecting an entity
}

void
recon::Recon::enemyDamagedEvent(SEnemyDamagedEvent* evt){
	springai::Unit* u(GetEnemyUnitById(evt->enemy));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::rscore+=res->GetOptimum()/2.0;
}

void
recon::Recon::enemyDestroyedEvent(SEnemyDestroyedEvent* evt){
	springai::Unit* u(GetEnemyUnitById(evt->enemy));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::rscore+=res->GetOptimum()*10.0;
}


void
recon::Recon::unitDamagedEvent(SUnitDamagedEvent* evt){
	springai::Unit* u(GetFriendlyUnitById(evt->unit));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::rscore-=res->GetOptimum()/2.0;
}

void
recon::Recon::unitDestroyedEvent(SUnitDestroyedEvent* evt){
	springai::Unit* u(GetFriendlyUnitById(evt->unit));
	springai::Resource* res;
	u->GetDef()->GetCost(res);
	AIBase::rscore-=res->GetOptimum()*10.0;
}

void
recon::Recon::defaultEvent(){
	if(frame%100==0 && !AIBase::rdone && done.size() && allDone()){
		AIBase::rdone=true;
		std::cout << "Recon score: " << AIBase::rscore << "\n";
		std::cout << "Recon score: " << AIBase::rscore << "\n";
		callback->GetGame()->SendTextMessage("/AIKill 0",0);
		callback->GetGame()->SendTextMessage("/AIKill 1",0);
	}
}
