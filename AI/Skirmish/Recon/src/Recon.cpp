/* This file is part of the Spring engine (GPL v2 or later), see LICENSE.html */

#include "Recon.h"


#include "ExternalAI/Interface/AISEvents.h"
#include "ExternalAI/Interface/AISCommands.h"

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "Unit.h"
#include "UnitDef.h"
#include "Game.h"

#include <string>
#include <iostream>
#include <ostream>

recon::Recon::Recon(springai::OOAICallback* callback):
		callback(callback),
		skirmishAIId(callback != NULL ? callback->GetSkirmishAIId() : -1),
		numPlanes(0),
		reconUnitDef(0),
		hq(0)
		{ }

recon::Recon::~Recon() {}

static inline std::string IntToString(int i, const std::string& format = "%i")
{
	char buf[64];
	SNPRINTF(buf, sizeof(buf), format.c_str(), i);
	return std::string(buf);
}

static std::ostream& operator <<(std::ostream& ss, springai::AIFloat3 const& vec){
	ss<<vec.x<<","<<vec.y<<","<<vec.z;
	return ss;
}
static std::ostream& operator <<(std::ostream& ss, springai::Unit *const unit){
	springai::UnitDef* unitDef(unit->GetDef());
	ss<<"Unit "<<unitDef->GetType()<<"-"<<unit->GetUnitId()<<":"<<"\n  "
			<< "NAME: "<<unitDef->GetName()<<"\n  "
			<< "HNAME: "<<unitDef->GetHumanName()<<"\n  "
			<< "CATEGORY: "<<unitDef->GetCategoryString()<<"\n  "
			<< "AIR LOS: "<<unitDef->GetAirLosRadius()<<"\n  "
			<< "JAM RADIUS: "<<unitDef->GetJammerRadius()<<"\n  "
			<< "LOS HEIGHT: "<<unitDef->GetLosHeight()<<"\n  "
			<< "LOS RADIUS: "<<unitDef->GetLosRadius()<<"\n  "
			<< "RADAR RADIUS: "<<unitDef->GetRadarRadius()<<"\n  "
			<< "STUNNED: "<<unit->IsParalyzed()<<"\n  "
			<< "ACTIVE: "<<unit->IsActivated()<<"\n  "
			<< "BUILDING: "<<unit->IsBeingBuilt()<<"\n  "
			<< "LOC: "<<unit->GetPos()<<"\n  "
			<< "VEL: "<<unit->GetVel();
	return ss;
}

void recon::Recon::AddPlane(int unitId){
	const std::vector<springai::Unit*> friendlyUnits = callback->GetFriendlyUnits();
	springai::Unit* u(GetFriendlyUnitById(unitId));
	if(u){
		std::string name(u->GetDef()->GetName());
		if(name.find("recon")!=std::string::npos){
			this->numPlanes++;
			std::cout << "now have " << this->numPlanes << "planes\n";
			std::cout << u << "\n";
			springai::AIFloat3 dest = {500,1500,500};
			//u->MoveTo(dest,0);
			u->SetOn(true,0);
			u->PatrolTo(dest,0);
		}
	}
}

void recon::Recon::GetUnitById(int id, std::vector<springai::Unit*> const& units, springai::Unit** unit) const{
	for(auto u: units){
		if(id==u->GetUnitId()){
			*unit = u;
			break;
		}
	}
}
springai::Unit* recon::Recon::GetEnemyUnitById(int id) const{
	springai::Unit* ut(0);
	GetUnitById(id,callback->GetEnemyUnits(),&ut);
	return ut;
}
springai::Unit* recon::Recon::GetFriendlyUnitById(int id) const{
	springai::Unit* ut(0);
	GetUnitById(id,callback->GetFriendlyUnits(),&ut);
	return ut;
}
int recon::Recon::HandleEvent(int topic, const void* data) {

	switch (topic) {
		case EVENT_UNIT_CREATED: {
			struct SUnitCreatedEvent* evt = (struct SUnitCreatedEvent*) data;
			int unitId = evt->unit;

			AddPlane(unitId);

			if(!hq){
				const std::vector<springai::Unit*> friendlyUnits = callback->GetFriendlyUnits();
				for(auto u: friendlyUnits){

					std::string name(u->GetDef()->GetName());
					if(prefix == ""){
						prefix=name.substr(0,3);
					}
					if((name.find("hq")!=std::string::npos || name.find("comissar")!=std::string::npos) && std::string("BUILDING")==u->GetDef()->GetCategoryString()){
						hq=u;
						break;
					}
				}
			}

			if(prefix != "" && !reconUnitDef){
				std::vector<springai::UnitDef*> defs(callback->GetUnitDefs());
				for(auto const d: defs){
					std::string n(d->GetName());
					if(n.find("recon")!=std::string::npos && n.find(prefix)!=std::string::npos){
						reconUnitDef=d;
						break;
					}
				}
			}

			if(hq && reconUnitDef && numPlanes<10){
				hq->Build(reconUnitDef,hq->GetPos(),0,0,0);
				std::cout << "Building " << reconUnitDef->GetName() << "\n";
			}

			break;
		}
		default: {
			break;
		}
	}

	// signal: everything went OK
	return 0;
}
