#ifndef _aibase_H
#define _aibase_H

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "AIUtils.h"
#include "OOAICallback.h"
#include "Unit.h"
#include "UnitDef.h"
#include "Utils.h"
#include "AISEvents.h"

#include "WeaponDef.h"
#include "Game.h"
#include <map>
#include <vector>
#include <iostream>

class AIBase {

protected:
	springai::OOAICallback* callback;
	int skirmishAIId;
    int numUnits;
    std::string prefix;
    springai::Unit* hq;
    void AddUnit(int unitId);
    springai::Unit* GetFriendlyUnitById(int id) const;
    springai::Unit* GetEnemyUnitById(int id) const;
    std::vector<std::vector<springai::AIFloat3> > waypoints;
    std::map<int,int> u2i;
    std::vector<int> ustat;
    std::vector<bool> done;
	std::vector<springai::Unit*> friends;
	int frame;
	double myPoints;

	// Very implementation dependent -
	static double iscore;
	static double rscore;
	static bool idone;
	static bool rdone;

	virtual bool allDone()const{
		bool d(true);
		int i(0);
		for(auto const& ad: done){d&=ad;if(!ad){std::cout << "a "<<i++<<"not done\n";}}
		return d;
	}
	virtual void unitCreatedEvent(SUnitCreatedEvent* evt);
	virtual void commandFinishedEvent(SCommandFinishedEvent* evt);
	virtual void weaponFiredEvent(SWeaponFiredEvent* evt){}
	virtual void enemyLeaveLOSEvent(SEnemyLeaveLOSEvent* evt){}
	virtual void enemyEnterLOSEvent(SEnemyEnterLOSEvent* evt){}
	virtual void enemyLeaveRadarEvent(SEnemyLeaveRadarEvent* evt){}
	virtual void enemyEnterRadarEvent(SEnemyEnterRadarEvent* evt){}
	virtual void enemyDestroyedEvent(SEnemyDestroyedEvent* evt){}
	virtual void enemyDamagedEvent(SEnemyDamagedEvent* evt){}
	virtual void unitDamagedEvent(SUnitDamagedEvent* evt){}
	virtual void unitDestroyedEvent(SUnitDestroyedEvent* evt){}
	virtual void defaultEvent(){}
public:
	AIBase(springai::OOAICallback* callback);

	int HandleEvent(int topic, const void* data);
}; // class AIBase



#endif // _aibase_H
