#ifndef _aibase_H
#define _aibase_H

// generated by the C++ Wrapper scripts
#include "OOAICallback.h"
#include "AIUtils.h"
#include "OOAICallback.h"
#include "Unit.h"
#include "UnitDef.h"
#include "Utils.h"
#include "AISEvents.h"

#include "WeaponDef.h"
#include "Game.h"
#include <unordered_map>
#include <vector>
#include <iostream>

class AIBase {

public:

	template<typename Out>
	void split(const std::string &s, char delim, Out result);
	std::vector<std::string> split(const std::string &s, char delim);
protected:
	springai::OOAICallback* callback;
	int skirmishAIId;
    int numUnits;
    int numEnemies;
    std::string prefix;
    springai::Unit* hq;
    void AddUnit(int unitId);
    springai::Unit* GetFriendlyUnitById(int id) const;
    springai::Unit* GetEnemyUnitById(int id) const;
    std::vector<std::vector<springai::AIFloat3> > waypoints;
    std::vector<std::string> status;
    std::vector<std::string> name;
    std::unordered_map<int,int> u2i;
	std::unordered_map<int,int> eu2i;
    std::vector<int> ustat;
    std::vector<bool> done;
	std::vector<springai::Unit*> friends;
	int frame;
	bool alldone;
	int  score;
	bool statusSent;
	bool deathOccurred;

	int GetIntOption(char const* const val, int dflt=0);
	std::string GetStringOption(char const* const val);
	virtual bool allDone()const{
		for(auto const& ad: done){if(!ad)return false;}
		return true;
	}
	virtual void unitCreatedEvent(SUnitCreatedEvent* evt);
	virtual void commandFinishedEvent(SCommandFinishedEvent* evt);
	virtual void weaponFiredEvent(SWeaponFiredEvent* evt);
	virtual void enemyLeaveLOSEvent(SEnemyLeaveLOSEvent* evt){}
	virtual void enemyEnterLOSEvent(SEnemyEnterLOSEvent* evt){}
	virtual void enemyLeaveRadarEvent(SEnemyLeaveRadarEvent* evt);
	virtual void enemyEnterRadarEvent(SEnemyEnterRadarEvent* evt);
	virtual void enemyDestroyedEvent(SEnemyDestroyedEvent* evt);
	virtual void enemyDamagedEvent(SEnemyDamagedEvent* evt);
	virtual void unitDamagedEvent(SUnitDamagedEvent* evt);
	virtual void unitDestroyedEvent(SUnitDestroyedEvent* evt);
	virtual void projectileMovedEvent(SProjectileMovedEvent* evt){}//std::cout << "Projectile "<<evt->id<<": "<<evt->x<<","<<evt->y<<","<<evt->z<<"@"<<evt->timeOffset<<"\n";}
	virtual void radarChangedEvent(SRadarChangedEvent* evt){}//{std::cout << "Radar state for unit " << evt->unitId << " is " << evt->state << "\n";}
	virtual int defaultEvent(int topic, const void* data){
		if(deathOccurred){
			friends=callback->GetFriendlyUnits();
			deathOccurred=false;
		}
	}
public:
	AIBase(springai::OOAICallback* callback);

	int HandleEvent(int topic, const void* data);
}; // class AIBase



#endif // _aibase_H
